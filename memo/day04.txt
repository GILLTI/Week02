day04

1. 입력메소드 - 콘솔창을 이용해서 입력
	
1) 함수
	기능
	이름 뒤에 ()가 온다
	
2) 메소드
	함수와 같이 기능을 의미한다
	java에서 모든 함수는 클래스 내부에 만들어지므로 메소드라고 말한다

	어떤 메소드를 사용하기 위해서는 그 메소드가 어떤 클래스에 존재하는지 알아야한다
	System.out.println()  [ . 은 ~안에 뜻]

3) Scanner 클래스
	입력 메소드를 이용하기 위해서는 반드시 입력 클래스 불러와야한다(아래 1줄이 필요하다)	
	입력 클래스가 위치한 패키지가 다르기 때문에 패키지를 불러와야한다(inport java.util.Scanner)


	Scanner sc	=	new Scanner(System.in);
	자료형	변수명	대입연산자		값

4) 입력메소드	
	Scanner 클래스 내부에 입력 메소드가 만들어져 있다
	next() : 입력 받은 값을 String타입으로 돌려준다
		(입력받은 값을 변수에 저장시에는 String 변수를 만들어야한다)
		입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다
		임시 저장공간에서 엔터를 소모하지 않는다
	- 첫번째 문자열을 첫번째 next()에 담고 두번째 문자열은 두번째 next()에 담는다


		String name1 = sc.next();
		String name2 = sc.next();
		syso(name1);	//김
		syso(name2);	//승현

		띄어쓰기는 아직 버퍼에 남아있다
	
	nextLine() : 입력받은 값을 String타입으로 돌려준다	
			띄어쓰기를 포함한 줄 전체를 입력받는다
			엔터 이전까지의 값을 가져온다
			엔터를 임시저장공간에서 지워준다(소모한다)
	nextInt():	입력받은 값을 int타입으로 돌려준다
			입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다			

	nextDouble():	입력받은 값은 double타입으로 돌려준다
			입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다	

	=> next(), nextInt(), nextDouble()을 사용하면 엔터값이 남아 있게 되는데
	다음에 nextLine()을 사용하게 되면 남아있던 엔터를 소모하여 입력을 받지 않게 된다
	따라서 입력받기 전에 nextLine()을 사용하여 언터를 소모시켜야 한다


+) 각 자료형의 기본값 (초기화 시킬 때 주로 사용)
	int : 0
	double : 0.0
	char : ''
	String : "",null
	boolean : false


2. 연산자 
	기능이 있는 특수문자

1) 연산자의 우선순위와 결합방식
	하나의 수식에 여러개의 연산자를 사용하면 어떤 연산이 먼저 되는 지를 구분한다

	최우선
	단항
	산술
	쉬프트
	관계
	논리
	삼항
	대입

2) 결합성
	하나의 수식에 동일한 연산자가 여러개 사용되면 알맞은 방향으로 결합되어 연산되는 성질
	
3) 산술연산자
	+	정수 + 정수 = 정수
		실수 + 실수 = 실수 
		정수 + 실수 = 실수
		문자열 + 문자열 = 문자열연결
	
	-	정수 - 정수 = 정수
		실수 - 실수 = 실수
		정수 - 실수 = 실수
	
	*	정수 * 정수 = 정수
		실수 * 실수 = 실수
		정수 * 실수 = 실수
	
	/	정수 / 정수 = 정수(소수점 이하는 버림)
		실수 / 실수 = 실수
		정수 / 실수 = 실수
	
	%	정수 % 정수 = 정수(나눗셈의 나머지)
		실수 % 실수 = 실수(나눗셈의 나머지)
		
4) 복합대입 연산자
	+=, -=, *=, /=, %=
	
	int num = 10;
	num = num + 2; ==> num += 2;

5) 증감연산자
	++, --
	전위형 => 해당 라인부터 바로 적용
		++num, --num => ex) int num = 1;
					syso(num); //1
					syso(++num); //2	

	후위형 => 다음라인부터 적용(증감연산자가 끝난 시점부터 적용)
		num++, num--
		ex) int num = 1;
     	 syso(num);   //1
     	 syso(num++);   //1
      	syso(num);   //2
			
	증감 연산자는 피연산자를 1씩 증가 또는 1씩 감소시킬 때 사용하는 연산자
	피연산자가 1개 뿐인 단항 연산자이다
	증감연산자는 해당 연산자가 피연산자의 어느쪽에 위치하는 가에 따라 연산의 결과가 달라지게 된다
	++x	먼저 피연산자의 값을 1증가시킨 후에 해당 연산을 진행한다
	x++	먼저 해당 연산을 수행하고 나서 피연산자의 값을 1증가시킨다
	--x	먼저 피연산자의 값을 1감소시킨 후에 해당 연산을 진행한다
	x--	먼저 해당 연산을 수행하고 나서 피연산자의 값을 1감소시킨다	

ex)    int num1 = 7, num2 = 7;
   	int result1 = 0, result2 = 0;

 	  result1 = --num1 + 4; 	
	// --num1은 전위감ㅅ연산자 num1 값이 먼저 감소한뒤 연산에 사용
	// num1의 값 : 7 -> 6
	// 계산 : 6 + 4의 결과값이 result1 변수에 대입, 결과 10

 	 result2 = num2-- + 4;
	 // num--는 후위감소연산자 num2의 현재 값이 연산에 사용된 후 감소된다
      //num2의 값 : 7
      //계산 : 7 + 4의 결과값이 result2 변수에 대입, 결과 11
      //그 후 num2의 값 : 7 -> 6


6) 관계연산자(비교연산자)
   조건식   결과가 참, 거짓 둘 중 하나가 나오는 식
      결과가 boolean 타입으로 나온다

   >, <   : 초과, 미만
   >=, <=    : 이상, 이하
   ==   : 같다
   !=   : 같지 않다

   a > b    a가 b보다 크니? 맞으면 true, 틀리면 false
   a < b   a가 b보다 작니? 맞으면 true, 틀리면 false
   a >= b   a가 b보다 크거나 같니? 맞으면 true, 틀리면 false
   a <= b  a가 b보다 작거나 같니? 맞으면 true, 틀리면 false
   a == b    a가 b랑 같니? 맞으면 true, 틀리면 false
   a != b  a가 b랑 같지 않니? 맞은면 true, 틀리면 false

 7) 논리연산자
	and	: 두 조건식 모두 참이면 참
	or	: 두 조건식 중 하나라도 참이면 참	
	not	: 조건식이 참이면 거짓으로, 거짓이면 참으로 변경
	