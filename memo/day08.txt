day08

1. 2차원 배열
1) 2차원 배열의 선언과 생성
	자료형[][] 배열명 = new 자료형[행][열] (행과 열은 인덱스로 간다)
	자료형[][] 배열명 = {{값1, 값2 ,값3}, {값1, 값2, 값3}};
	
	
2) 2차원 배열 길이
	배열명.length : 행의 길이
	배열명[i].length : 열의 길이

3) for~each문(빠른 for문, 확장 for문)
	//1차원
	for(자료형 변수명 : 배열명){
		실행할문장;
	}
	
	//2차원
	for(자료형[] 변수명1 : 배열명 


2. 배열의 정렬
1) 정렬 알고리즘
	삽입정렬	= 각 요소를 이미 정렬된 부분에 삽입
	선택정렬	= 배열의 최소값을 찾아 첫위치로 이동
	버블정렬	= 인접한 두 요소를 비교하고 교환하면서 가장 큰 값을 뒤로 이동


2) 삽입 정렬(Insertion Sort)
	배열의 요소를 하나씩 순회하며 정렬된 부분에 올바른 위치를 찾아 삽입하는 방식

+) 동작방식
	두번째 요소부터 시작하여 이전 요소들과 비교한다
	비교를 통해 자신의 위치를 찾은 후 그 자리에 삽입한다
	나머지 요소를 반복적으로 처리한다

3) 선택정렬(Selection Sort)
	배열에서 가장 작은 값을 선택하여 현재 위치와 교환하는 방식
	
+) 동작원리
	배열에서 가장 작은 값을 찾아 현재 위치로 이동한다
	다음위치에서 가장 작은 값을 찾아 이동한다
	마지막까지 반복한다
	
4) 버블정렬
	인접한 두 요소를 비교하여 교환하는 방식
	가장 큰값이 단계별의 끝으로 이동한다
	
+) 동작원리
	반복적으로 배열을 순회하며 두 요소를 비교한다
	두 요소의 순서가 잘못되었다면 교환(swap)한다
	각 반복이 끝날 때 가장 큰 요소는 배열의 끝으로 이동하여 정렬된 상태가 된다
	마지막 정렬된 요소를 제외하고 나머지 요소를 비교하고 정렬한다
	배열이 완전히 정렬될 때까지 이 과정을 반복한다
	
	[5, 2, 9, 1, 6]

첫번째 순회 : 5와 2 비교 -> 5 > 2 교환   => [2, 5, 9, 1, 6]   
       5와 9 비교 -> 5 < 9 교환 없음
       9와 1 비교 -> 9 > 1 교환   => [2, 5, 1, 9, 6]
      9와 6 비교 -> 9 > 6  교환   => [2, 5, 1, 6, 9]

두번째 순회 : 2와 5 비교 -> 교환 없음
       5와 1 비교 -> 5 > 1   교환   => [2, 1, 5, 6, 9]
      5와 6 비교 -> 교환 없음      

5) Arrays.sort()
	java.util.Array 클래스에 포함된 정렬 메소드
	내부적으로 TimeSort 알고리즘을 사용하며 합병정렬과 삽입정렬을 결합한 고효율알고리즘이다
	기본적으로 오름차순으로 정렬되며 배열을 빠르고 효율적으로 정렬할 수 있다
	
Arrays.toString(배열명)
	.toString() 배열의 내용을 문자열 형식으로 반환하는 메소드
	배열을 보기 쉽게 출력하기 위해 사용한다
	기본적으로 1차원 배열의 내욜을 출력할 수 있다
	
Arrays.deepToString(배열명)
	다차원 배열의 내욜을 출력하기 위해 사용한다



3.배열의 얕은 복사와 깊은 복사 
	복사가 참조를 복사하는지 또는 실제데이터를 복사하는지에 따라 얕은 복사와 깊은 복사로 나눌 수 있다
	
1) 얕은 복사(Shallow Copy)
	복사된 객체가 원본 객체의 참조를 공유한다
	원본과 복사본이 같은 객체를 찾모하므로, 
	하나를 수정하면 다른 하나에도 영향을 미친다
	배열이나 객체의 복사가 이루어져도 내부 요소는 복사되지 않고 참조값만 복사된다
	heap메모리에 배열생성

2) 깊은 복사(Deep Copy)--> copyof 메소드 사용
	원본 객체의 데이터 자체를 복사하여 복사된 객체가 원본 객체와 독립적이다
	원본 객체를 수정해도 복사본은 영향을 받지 않는다	
	배열의 경우 내부 요소를 재귀적(자기 자신을 호출)으로 복사해야한다
		
+) 재귀(Recursion)
	함수가 자기자신을 호출하는 프로그래밍 기법이다
	큰 문제를 해결하기 위해 동일한 문제를 더 작은 크리고 나누고 반복적으로 해결하는 방식으로 작동한다
			

4. 메소드(Method)
0) 함수와 메소드
	클래스 밖에 선언되어 있다면 함수라고 부르지만 클래스 내부에 선언되어 있는 함수는 메소드라고 부른다
	자바에서는 모든 함수가 클래스 내부에 선언되기 때문에 메소드만 존재한다
	
1) 메소드
	기능?
	이름뒤에 소괄호 온다 / 단, 키워드 뒤에 소괄호는 메소드가 아니다
	main() => 메인메소드	
	println() => 출력메소드
	next() => 입력메소드
	for() => for문(반복문)

2) 메소드 선언과 구현(정의)
	리턴타입 메소드명(자료형 매개변수, ...)	<- 선언부
	{				<- 구현부
		실행할 문장;
		return 리턴값;
	}

-리턴타입(자료형) : 반환할 값이 있다면 반환값의 자료형을 작성한다. 없다면 void로 작성한다
-메소드명 : 보통 동사로 작성하며, 해당 기능을 알기 쉽도록 작성
-매개변수 : 외부에서 전달받을 값이 있다면 자료형과 순서에 맞게 선언해준다
	 ( 자료형이 반드시 필요하다)생략이 가능하다
	 단, 생략하면 외부에서 값을 받을 수 없다
-실행할 문장 : 생략이 가능하다. 메소드의 기능을 구현하는 코드를 작성한다
-return : 생략이 가능하며, return이 실행되면 메소드가 종료된다.
	 return값이 없다면 값이 아니다. ( 값 -> 삼항연산)

3) 메소드의 정의와 사용
	메소드를 정의할 때는 {}중괄호가 있고, 반드시 메소드 밖에서 정의한다
	메소드를 사용할 때는 {}중괄호가 없고, 반드시 메소드 안에서 사용한다
	
4) 메소드의 정의 순서 ★

(1) 기능을 생각한다(숫자를 더해주는 기능)
(2) 리턴타입(반환타입)을 생각한다 -> 생각이 나지 않는다면 우선 void로 작성
	void
(3) 기능에 알맞은 메소드명을 작성=> add, sum, pius, pringAdd...
	void add
(4) 매개변수를 생각한다
	void add(int num1, int num2)
	{

	}
(5) 실행할 문장을 작성한다(구현부)
	void x/→int o add(int num1, int num2)
	{
		→int result = num1 + num2
		return result;
	}
(6) 리턴값을 생각한다.
	 int add(int num1, int num2)
   {
      int result = num1 + num2;
      return result;
   }



5) 메소드의 호출 방법 4가지★
	매개변수	리턴값	호출
	x	x	객체명.메소드명();
	o	x	객체명.메소드명(인수);	//매개변수의 개수만큼 인수 전달
	x	o	syso(객체명.메소드명());		변수 = .메소드명();
	o	o	syso(객체명.메소드명(인수));	변수 = .메소드명(인수);















