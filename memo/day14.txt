day14
추상클래스 -> 인터페이스-> 어댑터클래스 -> 내부클래스 -> 익명클래스 -> 람다식

call = null; -> 참조제거 
System.gc(); -> 권장하지 않음(개발자가 가비지컬렉션을 명시적으로 요청할 수 있으나 JVM이 반드시 즉시 실행하지는 않음)

1. 추상클래스	
	추상 : 실체간에 공통되는 특성을 추출한 것을 의미한다
		ex)고양이, 강이지, 돼지, 치타 => 동물, 네발, 움직인다
		추상클래스를 구성하는 멤버 중 추상 메소드가 존재한다는 의미
	
	리턴타입 메소드명(자료형 매개변수)<- 선언부
	{	}		<- 구현부

	리턴타입 메소드명 (자료형 매개변수);
	선언만하고 구현은 하지 않은 메소드를 추상메소드라고 한다
	
1) 추상메소드	
	메소드를 선언만 하고 구현하지 않은것을 의미한다
	미완성된 메소드, 구현부가 없는 메소드
	ex) abstract 리턴타입 메소드명(자료형 매개변수);

2) 추상클래스	
	abstract 키워드가 붙은 클래스를 추상클래스라고 한다
	추상메소드를 한 개 이상 가져야한다
	미완성된 클래스
	
3) 추상클래스와 추상메소드의 선언
	abstract calss 클래스명 {	//객채화 바로 불가, 
		//필드, 생성자, 메소드
		abstract 리턴타입 메소드명(자료형 매개변수);
	}
	- abstract 키워드를 사용한다
	- 추상 클래스는 개겣화 시킬 수 없다
	※ 미완성된 메소드(추상메소드)는 상속받은 자식클래스에서 반드시 재정의 하여 구현을 해야만
	해당 클래스를 객체화 할 수 있다. 그러므로 [강제성]을 부여하기 위해서 추상메소드로 선언한다.

4) 추상 클래스를 사용하는 이유
	공통되는 속성과 행위를 추상화하여 부모클래스를 만드는데 반드시 모든 자식클래스에서 구현해야하는
	메소드가 있다면 추상 메소드로 선언하는게 좋다
	추상 클래스를 상속받은 자식 클래스(일반)는 추상메소드를 오버라이딩(재정의)하지 않으면
	오류가 발생하므로[강제성]이 생기게 된다
	만약 부모클래스에서 메소드를 구현을 한다면 겅제성이 없으므로 자식클래스를 만드는 개발자가
	재정의하지 않고 그냥 넘어갈 수 있다.

2. 인터페이스(interface)
	일종의 추상클래스이지만 클래스라고 부르지 않으며 추상화의 정도가 높다
	-> 공통되는 특징을 정의, 상수, 추상메소드
	인터페이스는 객체화 할 수 없다
	인터페이스는 다른 클래스에서 구현(implements)해서 사용한다
	구현 할 떄는 impolements 키워드를 사용한다
	
1) 인터페이스의 선언
	interface 인터페이스명{
	//상수, 추상메소드; <--이것만 올 수 있다
	}

2) 인터페이스의 멤버
	모든 변수는 public static final이다 (생략해도 자동으로 붙음)
	모든 메소드는 public avstract이다(생략해도 자동으로 붙음)
	
+) 일반클래스 vs 추상 클래스 vs 인터페이스
추상화 정도 -->>>
- 일반클래스
   가장 구체적
   세부 구현이 모두 포함됨
   추상화의 정도가 낮음

   class Dog{
      void sound(){
         syso("멍멍");
      }
   }

- 추상클래스
   일부 구현만 제공
   공통적인 부분을 추상화하지만, 세부 구현도 일부 포함
   추상화의 정도는 중간

   abstract class Animal{

      abstract void sound();
      void eat(){
         syso("먹습니다");
      }
   }

- 인터페이스
   구현없이 완전 추상적
   구체적인 세부사항 전혀 포함하지 않음
   추상화의 정도가 가장 높음
   interface flyable{
      void fly();   
   }

+) 추상화 : 중요한 기능(부분)만 보여주고 복잡한 내부 동작은 숨기는 것을 의미
	자동차 => 핸들, 가속페달, 브레이크페당 사용
	ATM => 출금하기, 입금하기
	구체적으로 알려주지 않아도 내부 로직을 몰라도 사용할 수 있는 것
	
+) 프로그래밍에서의 추상화
	필요한 것만 보여줌 : 클래스나 메소드를 설계할 때 어떻게 동작하는지는 숨기고
			무엇을 할 수 있는지만 정의 
	
	동물클래스 => 동물은 소리를 낸다는 공통 동작, 구체적으로 어떤 소리를 내는지는 동물들만다 다름
		추상화를 사용하면 소리를 낸다라는 동작만 저으이하고 구체적인 소리는 각 동물들이 구현

3) 클래스 상속과 인터페이스의 구현
 a. 클래스는 단일 상속만 가능하며 인터페이스는 다중 구현이 가능하다
 b. 클래스 단일 상속
	클래스는 하나의 크랠스만 상속받을 수 있다
	다중 상속은 충돌 문제를 일으킬 수 있기 때문이다 -> 모호성
	ex) 동일한 이름의 메소드를 여러 부모 클래스가 제공하는 경우
		어떤 메소드를 호출해야할지 모호함이 발생

 c. 인터페이스는 다중 구현
	여러 인터페이스를 동시에 구현할 수 있다. 
	인터페이스의 매소드는 구현이 없기 때문에 충돌위험이 없다
	구현 클래스에서 메소드를 정의하기 때문에 충돌 문제를 피할 수 있음

 d. 인터페이스는 인터페이스를 상속할 수 있다
	인터페이스끼리는 상속이 가능하며 다중상속도 가능하다
	상속받은 인터페이스의 모두 포함되며 구현하는 클래스는 모든 메소드를 구현해야한다
	
 e. 상속과 구현은 별개이다
	클래스 상속과 인터페이스 구현을 동시에 사용할 수 있다
	하나의 클래스가 다른 클래스를 상속받으면서 동시에 여러 인터페이스를 구현하는 것이 가능하다
		
4) 다중 상속
	여러 부모클래스를 상속하는 것을 다중 상속이라고 한다
	java는 모호성 때문에 다중 상속을 지원하지 않는다
	but JDK8버전 부터는 인터페이스에 default 메소드, static메소드, private 메소드를
	만드는 것을 허용한다 (특정 메소드의 구현을 허용한다)
	여러개의 구현(상속)할 수 있는 인터페이스의 특징 때문에 다중상속을 지원하는 것이나 다름이 없다
	
인터페이스에 추가된 기능
	- default 메소드를 선언할 수 있다
	default 리턴타입 메소드명(자료형 매개변수){
		//실행할 코드;
	}

	-static 메소드를 선언할 수 있다
	static 리턴타입 메소드명(자료형 매개변수){
		//실행할 코드;
	}
	-동일한 로직 사용시 중복된 코드 문제 발생-> 때문에 중복된 코드를 제거하기위해
	-private 메소드를 선언할 수 있다(jdk9부터 사용 가능하다)
	private 리턴타입 메소드명(자료형 매개변수){
		//실행할 코드;
	}

5) 모호성(ambiguity)
	하나의 자식이 여러 부모를 상속받을 떄 서로 다른 부모 클래스에 동일한 멤버가 있다면
	어떤 부모의 멤버인지 알 수 없다

- 모호성 해결방법
	-두 개의 인터페이스에 같은 메소드가 선언되어 있는 경우( 메소드명, 매개변수, 리턴타입 같은 메소드)
	=> 자식 클래스에서 재정의하여 사용한다
	
	-부모클래스의 메소드와 인터페이스의 메소드의 이름과 매개변수가 같은 경우
	=> 부모클래스의 메소드가 사용된다
		구현하는 인터페이스보다 상속받는 부모 클래스의 우선순위가 높기 때문이다

//  The inherited method Class1.printText() 
//  cannot hide the public abstract method in Inter1
//  인터페이스의 메소드와 클래스 메소드 간의 충돌 문제 발생
//  인터페이스의 메소드가 abstract 인 경우 클래스에서 숨기거나 무시할 수 없다
  
  //Class1과 Inter1 양쪽에 printText()메소드가 존재하지만
  //오류발생가 발생하지 않는 이유는 구현하는 인터페이스보다 상속받는 부모 클래스의
  //우선순위가 더 높기 때문이다

6) 인터페이스의 불편함
	인터페이스는 강제성이 강하기 때문에 구현하는 클래스에서 일부만 재정의하여 사용하는 것이 불가능 하다
	이를 해결하기 위해 Adapter 라는 추상 클래스를 활용한다

7) 어댑터 클래스( 추상 클래스) 와 인터페이스
	인터페이스의 강제성을 완화시키기 위해 Adapter 클래스를 사용한다
	어댑터 클래스는 추상클래스로 만들기 때문에 미구현된 메소드와 구현된 메소드가 동시에 존재할 수 있다
	그러므로 어댑터 클래스에서 인터페이스를 상속 받아 강제성을 없애고 싶은 메소드만 재정의 해준다
	이후 어댑터 클래스를 상속받는 자식 클래스는 내가 원하는 메소드만 재정의 할 수 있게 된다
	이 떄 어댑터 클래스의 이름은 이름뒤에 Adapter를 붙여서 목적을 알려주는 것이 좋다.

	인터페이스(모든강제성) ----(일부구현)----> 추상클래스(일부강제성)---상속--->클래스 
	
	


























































