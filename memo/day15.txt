day15

내부클래스 -> 익명클래스 -> 람다식 -> 예외처리 -> API -> 스트림API or Object클래스

1.내부 클래스( Inner Class)
	클래스 내부에 선언된 클래스를 내부 클래스라고 한다
	내부클래스를 가진 클래스를 외부 클래스라고 한다
	클래스를 구성하는 멤버로 필드, 메소드, 생성자 + 클래스도 가질 수 있다
	만약 B클래스를 A클래스에서만 사용한다면 B클래스를 내부클래스로 만들어서 사용한다
	외부클래스가 메모리에 할당되어야 내부 클래스의 객체화가 가능하기 때문에 B만 별도로 사용하지 못한다
	내부클래스는 외부클래스의 멤버이기 때문에 외부클래스의 멤버를 상속 없이 사용할 수 있다
	
1) 내부 클래스 사용하는 이유	
	내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다
	코드의 복잡성을 줄일 수 있다 
	캡슐화 : 내부클래스는 외부클래스 내부에서만 사용가능 -> 외부 클래스의 내부구현을 숨기고 캡슐화 가능-> 코드 가독성, 유지보수성
	+)웹 개발보다는 앱개발에서 더 많이 사용된다(우리가 배운 이유는 익명클래스 이해하기 위함)

2) 내부클래스의 종류
	선언위치에 따른 부류		선언위치		객체생성조건		파일이름
	인스턴스 내부 클래스		classA{		A객체를 생성해야만		A%B.class
				 classB{}}	B객체를 생성할 수 있다.	A:외부 / B: 내부 클래스
	정적 내부 클래스	class A{		A객체를 생성하지 않아도
			static class B{}}	B객체를 생성할 수 있다
	로컬 내부 클래스	class A{
			void method(){		method가 실행할 때만	A%1B
				class B {}}}	B객체를 생성할 수 있다	A:외부
/ B: 내부 클래스

2. 익명클래스 (Anonymous class)-> 일회성 사용
	이름이 없는 클래스이다
	미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다
	인터페이스나 추상클래스를 구현할 때 유용하게 사용된다
	익명클래스는 자식 클래스를 만들지 않고도 인터페이스나 추상클래스를 구현할 수 있기 때문에
	코드의 양을 줄일 수 있고, 일회성으로만 사용시에는 불필요한 extends(상속)을 줄일 수 있다
	익명클래스는 클래스 내부에서 선언하며, 객치를 생성할 때 바로 구현해주는 방식으로 사용된다

※ 인터페이스는 항상 부모이다
   즉, 익명클래스는 자동으로 implements되어 부모 자식 관계가 맺어진다
   ** 자식 클래스를 객체를 생성하여 부모타입의 변수에 저장되었으니 Up casting 된 것이다
※ 추상클래스도 동일하다
   
//      InterA는 인터페이스 : 부모(상위타입)
//      인터페이스를 구현한 클래스는 모두 InterA를 부모로 둔다
//      인터페이스는 객체를 생성할 수 없어서 익명클래스를 통해 인터페이스의
//      메소드를 구현하고 객체로 생성할 수 있다

//      익명클래스 : 자식(하위타입)
//      익명클래스는 InterA 인터페이스를 자동으로 implements한다
//      익명클래스는 작성된 시점에 생성된 하나의 구체적인 클래스로 동작한다
//      이 클래스는 인터페이스의 메소드를 반드시 구현해야한다

//      업캐스팅
//      익명클래스의 인스턴스는 인터페이스 InterA타입의 변수에 저장된다(업캐스팅)
//      즉, 자식클래스 타입(익명클래스)을 부모클래스(InterA)의 참조변수 ia에
//      저장한 상태이다

//      ia 참조변수
//      타입이 InterA, 익명클래스 객체는 인터페이스 타입의 참조변수에 저장된다
//      부모타입으로 참조하고 있지만 실제 메소드 호출시에는 오버라이딩 된 자식클래스의
//      메소드가 실행된다(다형성)

//      Cannot instantiate the type InterA
//      구현되지 않은(미완성된) 메소드가 있기 때문에 객체 생성 불가능하다
//      구현되지 않은 것을 구현 해주면 객체를 생성할 수 있다


3. 람다식(lambda)
1) 함수형 인터페이스(Functional Interface)
	단 하나의 추상 메소드를 가지고 있는 인터페이스
	@FunctionalInterface 어노테이션을 명시해주면 하나의 추상 메소드만 선언할 수 있도록 제한할 수 있다	
	
2) 람다식 : 익명 메소드 
	자바 8버전부터 사용가능
	메소드를 하나의 식으로 표현한다
	람다식을 매개변수로 전달가능하며, 반환도 가능하다
	함수형 인터페이스는 추상메소드가 한개만 선언되기 때문에 람다식으로 재정의 할 때 이름이 필요없다
3) 람다식 문법
	매개변수 -> 바디

void printHello() {
		System.out.println("안녕하세요");
	}
	
//	void printHello() {System.out.println("안녕하세요");}
	//1. 이름을 없애고 화살표( -> )추가
	// void () -> { System.out.println("안녕하세요");}
	//2. 반환타입 추론가능 why? void이기 때문에 생략한다
	// () -> {System.out.println("안녕하세요");}
	//3. 명령문이 1줄이면 중괄호와 세미콜론을 생략가능하다(선택)
	// () -> System.out.println("안녕하세요")
	
	
	//매개변수o, 리턴값o
	int addTen(int num) {
		return num + 10 ;
	}
	
	//int addTen(int num) {return num + 10 ;}
	//1. int(int num) -> {return num + 10 ;}
	//2. (int num) -> {return num + 10 ;}
	//3. 매개변수 타입은 추론이 가능하므로 생략가능( 선택 )
	//	매개변수 타입을 생략한다면, 매개변수가 1개라면 () 생략 가능하다 ( 선택 )
	// num -> {return num + 10;}
	//4. 명령문이 1줄이면 중괄호와 세미콜론 생략가능하다( 선택 )
	// 증괄호와 세미콜론을 생략했다면 return 을 생략해야 한다
	// 바디의 결과가 값이라면 자동으로 return 된. 단, 바디에 명령문이 1개이어야만 한다
	// num -> num + 10  ===> 결과가 값이면 자동으로 return된다
	
	
	//매개변수 2개, return o , 바디의 명령문 2개
	int addNumber(int num1, int num2) {
		System.out.println("num1의 값 : " + num1 + ", num2의 값 : " + num2);
		return num1 + num2;
	}
	
	  // int addNumber(int num1, int num2) {System.out.println("num1의 값 : " + num1 +
	   // ", num2의 값 : " + num2);
	   // return num1 + num2; }

	   // 1. 이름을 없애고 -> 추가
	   // int (int num1, int num2) -> {System.out.println("num1의 값 : " + num1 + ",
	   // num2의 값 : " + num2);
	   // return num1 + num2; }

	   // 2. 리턴타입 추론가능하므로 생략가능하다(선택)
	   // (int num1, int num2) -> {System.out.println("num1의 값 : " + num1 + ", num2의 값
	   // : " + num2);
	   // return num1 + num2; }

	   // 3. 매개변수 타입은 추론 가능하므로 생략가능하다(선택)
	   // 매개변수가 2개 이상이면 ()생략 불가
	   // (num1, num2) -> {System.out.println("num1의 값 : " + num1 + ", num2의 값 : " +
	   // num2);
	   // return num1 + num2; }

	   // 4. 명령문이 2개이상이므로 {}와 ; 생략불가
	   // 반환할값이 존재한다면 return 사용한다
	   // (num1, num2) -> {System.out.println("num1의 값 : " + num1 + ", num2의 값 : " +
	   // num2);
	   // return num1 + num2; }

	}




























