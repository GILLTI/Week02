1. 배열
	하나의 타입으로 된 여러가지 값을 저장할 수 있다
2.배열의 사용 목적
	- 데이터의 집합을 효율적으로 관리하기 위한 목적
		동일한 데이터 타입을 가진 여러개의 값을 하나의 변수에 저장하고 관리할 수 있어서 데이터 집합을 효율적으로 처리할 수 있다
	-데이터의 순서를 보존하기 위한 목적
		선형적인 데이터 구조로, 데이터의 순서를 보존하면 쉽게 접근할 수 있는 방법 제공 index
	-반복문을 사용하여 배열의 요소를 처리하기 위한 목적
		많은 양의 데이터를 일괄적으로 처리할 수 있는 반복문을 쉽게 사용할수 있어서 데이터 처리를 효율적으로 할 수 있다
	-메모리를 효율적으로 사용하기 위한 목적
	-데이터를 정렬하거나 검색하기 위한 목적
		데이터를 정렬하거나 검색하는 데 사용될 수 있어서 프로그래밍에서 매우 중요한 자료구조이다
	
3. 배열의 선언
	int[] 배열명 ; = int 배열명[]; ===> 둘다 가능
	
4. 배열의 생성과 초기화
	new를 사용한다	배열명 = new 자료형[칸수];
	값을 대입한다	배열명 = {값,값,값...};
	null을 사용한다	값도 모르고, 칸수도 아직 모를 때 사용한다
	
5. 다차원 배열의 선언과 생성
	배열안에 또 다른 배열이 포함된 형태, 차원수와 각 차원의 크기를 지정
	int[][] 배열명 = new 자료형[행][열];
	자료형[][] 배열명 = {{값,값}, {값,값}}
   int[][] arr = {{1}, {2, 3}, {4, 5, 6}};
      System.out.println(arr);
      System.out.println(arr.length);
      System.out.println(arr[0].length);
      System.out.println(arr[1].length);
      System.out.println(arr[2].length);
      for(int[] ar : arr) {
         for(int ar1 : ar) {
            System.out.print("* ");
         }
         System.out.println();
      }


6. 배열의 구조
	int[]		ar		=	new	int[3];
		--------------------		--------------
		참조변수 Stack영역			참조값 Heap영역
		[첫번째시작주소]		=	[값1][값2][값3]
			ar			 0    1    2	


	자바 배열은 c나 c++과 달리 포인터 연산을 허용하지 않는다
	따라서 배열 요소에 접근할 때는 인덱스 연산을 통해 요소에 접근해야한다	
	인덱스 연산을 통해 배열 요소에 접근할 때는 배열변수의 시작주소와
	인덱스 번호를 더한 값이 해당 요소의 주소가 된다
	배열변수는 호출스탱에 할당되며 배열변수에 저장한 값은 배열의 시작주소를 나타낸다
	
	배열 요소는 heap메모리에 할당되므로 배열 변수가 참조하는 heap메모리 위치를 가리키는
	참조(reference) 변수를 스택(Stack)메모리에 저장하는 것이다


7. for each문
	코드의 가족성을 높이고 반복문에서 발생할 수 있는 일부 에러를 방지할 수 있는 장점이 있다
	for(변수 타입 변수명: 배열){
		//반복실행할 코드;
	}


