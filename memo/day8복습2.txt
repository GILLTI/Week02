복습	
1) 배열의 사용 목적
	- 데이터 정렬, 검색하기 위함
	- 데이터 집합을 효율적으로 관리하기 위함
	- 메모리를 효율적으로 사용하기 위함
	- 데이터의 순서를 보존하기 위함
	- 반복문을 사용하여 배열의 요소를 처리하기 위함
	
2) 배열
	변수 : 하나의 자료형으로 하나의 값 저장공간
	배열 : 하나의 자료형으로 여러가지 값 저장공간
	
	3) 배열의 선언과 생성   
   //칸수만 알고 있을 때
   자료형[] 배열명 = new 자료형[크기];

   //값을 알고 있을 때
   자료형[] 배열명 = {값, 값, 값, ..};

   //값을 모르고 나중에 생성할 때
   자료형[] 배열명;
   배열명 = new 자료형[]{값, 값, 값};

   null   : 주소값을 모를 때 사용한다
   new    : heap 메모리에 배열을 생성하고 시작주소값을 담고있다


	

4) 배열의 구조
	int[]		ar	=	new	int[3];
		stack메모리, 참조변수	heap메모리, 참조값
		[시작주소==참조값]			[0][0][0]
						 0  1  2

5) 2차원 배열 선언과 생성
	//칸(행과 열)을 알고 있을 때
	자료형[][] 배열명 = new 자료형[행][열]; >>>>>>열은 생략해도 가능
	
	//값을 알고 있을 때
	자료형[][] 배열명 = {{값, 값}, {값, 값}};

6) 반복문과 배열
	1차원 배열 => int[] ar = {1, 2, 3, 4};
	
	syso(ar);	//참조값
	 for(int i = 0; i < ar.length; i++){
		syso(ar[i]);
	}
	
	for(자료형int, 변수명 : 배열명) {
		syso(data);
	}

	 //2차원배열 => int[][]   ar2 = {{1, 2}, {3, 4}, {5, 6}};
   
   for(int[] i : ar2){
      for(int data : i){
         syso(data);
      }
   }

   for(int i = 0; i < ar2.length; i++){
      for(int j = 0; j < ar2[i].length; j++){
         syso(ar2[i][j]);
      }
   }

7) 메소드
   기능
   어떠한 기능을 하는 코드들의 묶음
   이름뒤에 소괄호

   함수 : 클래스 외부에 선언되어 있는 것
   메소드 : 클래스 내부에 선언되어 있는 것

8) 메소드의 정의
   리턴타입 메소드명(자료형 매개변수)   <- 선언부
   {            <- 구현부
      실행할문장;
      return 리턴값;
   }

9) 메소드 호출방법
   매개변수    리턴값   메소드 정의                  메소드호출
   x   x   void 메소드명(){ }               객체명.메소드명();
   o   o   String 메소드명(자료형 매개변수){return "문자열"}   syso(객체명.메소드명(인수));                                    String 변수 = 객체명.메소드명(인수);
   o   x   void 메소드명(자료형 매개변수){}         객체명.메소드명(인수);
   x   o   Double 메소드명(){ return 0.0 }         syso(객체명.메소드명());

10) 메소드 정의와 사용
   정의 {}중괄호가 있고 반드시 메소드 밖에서 정의한다
   사용 {}중괄호가 없고 반드시 메소드 안에서 정의한다

11) 메소드 정의 순서
   리턴타입 메소드명(자료형 매개변수, ..)   <- 선언부
   {            <- 구현부 
      실행할문장;
      return 리턴값;
   }

- 기능을 생각한다(두개의 값을 더하는 기능)
- 리턴타입을 생각한다. 생각나지 않으면 void로 작성한다
   void
- 기능에 맞는 메소드명을 작성한다(동사로 작성한다)
   void add
- 매개변수를 생각한다
   void add(int num1, int num2)   <- 선언부
   { }            <- 구현부
- 실행할문장을 작성한다(구현부)
   void add(int num1, int num2)
   {
      syso("num1 = " + num1 + ", num2 = " + num2);
      int result = num1 + num2;
   }
- 리턴값을 생각한다
   void add(int num1, int num2)
   {
      syso("num1 = " + num1 + ", num2 = " + num2);
      int result = num1 + num2;
      return result;
   }
- 리턴값이 있으면 리턴값에 맞게 리턴타입을 변경한다
   int add(int num1, int num2)
   {
      syso("num1 = " + num1 + ", num2 = " + num2);
      int result = num1 + num2;
      return result;
   }


메소드 정의는 메소드 중괄호 밖에서
